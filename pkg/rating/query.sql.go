// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package rating

import (
	"context"
)

const getTop30PartyRating = `-- name: GetTop30PartyRating :many
SELECT char_name, char_guild_name, char_level, party_rating, party_wins, party_loses, (party_wins + party_loses) as match_count
FROM bgrating WHERE party_wins + party_loses > 9 ORDER BY party_rating DESC, party_wins + party_loses LIMIT 30
`

type GetTop30PartyRatingRow struct {
	CharName      string
	CharGuildName string
	CharLevel     int32
	PartyRating   int32
	PartyWins     int32
	PartyLoses    int32
	MatchCount    int32
}

func (q *Queries) GetTop30PartyRating(ctx context.Context) ([]GetTop30PartyRatingRow, error) {
	rows, err := q.db.QueryContext(ctx, getTop30PartyRating)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTop30PartyRatingRow
	for rows.Next() {
		var i GetTop30PartyRatingRow
		if err := rows.Scan(
			&i.CharName,
			&i.CharGuildName,
			&i.CharLevel,
			&i.PartyRating,
			&i.PartyWins,
			&i.PartyLoses,
			&i.MatchCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTop30SoloRating = `-- name: GetTop30SoloRating :many
SELECT char_name, char_guild_name, char_level, solo_rating, solo_wins, solo_loses, (solo_wins + solo_loses) as match_count
FROM bgrating WHERE solo_wins + solo_loses > 9 ORDER BY solo_rating DESC, solo_wins + solo_loses LIMIT 30
`

type GetTop30SoloRatingRow struct {
	CharName      string
	CharGuildName string
	CharLevel     int32
	SoloRating    int32
	SoloWins      int32
	SoloLoses     int32
	MatchCount    int32
}

func (q *Queries) GetTop30SoloRating(ctx context.Context) ([]GetTop30SoloRatingRow, error) {
	rows, err := q.db.QueryContext(ctx, getTop30SoloRating)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTop30SoloRatingRow
	for rows.Next() {
		var i GetTop30SoloRatingRow
		if err := rows.Scan(
			&i.CharName,
			&i.CharGuildName,
			&i.CharLevel,
			&i.SoloRating,
			&i.SoloWins,
			&i.SoloLoses,
			&i.MatchCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
